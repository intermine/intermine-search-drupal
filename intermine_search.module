<?php

/**
 * Implements hook_menu()
 */
function intermine_search_menu() {
  $items = array();

  $items['admin/config/search/intermine_search'] = array(
    'title' => 'InterMine Search',
    'description' => 'Configuration for InterMine Search module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intermine_search_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback: InterMine Search settings
 *
 * @see intermine_search_menu()
 */
function intermine_search_form($form, &$form_state) {
  $form['intermine_name']  = array(
    '#type' => 'textfield',
    '#title' => t('InterMine name'),
    '#default_value' => variable_get('intermine_name', 'LegFed'),
    '#description' => t('This is the name of a single InterMine instance or a collection of InterMine instances'),
    '#required' => TRUE,
  );

  $form['intermine_base_url'] = array(
    '#type' => 'textarea',
    '#title' => t('InterMine Base URL'),
    '#default_value' => variable_get('intermine_base_url', '[{"intermine_base_url":"http://medicmine.jcvi.org/medicmine","intermine_name":"MedicMine"},{"intermine_base_url":"https://mines.legumeinfo.org/soymine","intermine_name":"SoyMine"}]'),
    '#description' => t('This is the base URL for a single InterMine instance (without trailing slash) or a JSON object encoding names and URLs for a collection of instances'),
    '#required' => TRUE,
  );

  $form['intermine_search_examples'] = array(
    '#type' => 'textfield',
    '#title' => t('InterMine example search terms'),
    '#default_value' => 'e.g. Medtr2g036650, plasma membrane, sucrose synthase, Glyma.16G153700, Glyma.16G153700.1, BARCSOYSSR_04_1400, Seed yield 15-5',
    '#description' => t('This is a set of example InterMine search terms to display as help text'),
    '#required' => FALSE,
  );

  return system_settings_form($form);
}

function intermine_search_search_info() {
  $intermine_name = variable_get('intermine_name');
  return array(
    'title' => $intermine_name,
    'path' => strtolower($intermine_name)
  );
}

function intermine_search_form_search_form_alter(&$form, &$form_state) {
  if ($form['module']['#value'] == 'intermine_search') {
    $form['intermine_search_description'] = array(
      '#type' => 'markup',
      '#prefix' => '<p class="help-block">',
      '#suffix' => '</p>',
      '#markup' => t('Search ' . variable_get('intermine_name')
      . '. Enter names, identifiers or keywords for genes, '
      . 'proteins, ontology terms, QTLs, etc. '
      .  variable_get('intermine_search_examples') )
    );
  }
}

function _intermine_search_service_url($intermine_base_url, $keys, $conditions, $facets = array()) {
  $params = array('q='.urlencode($keys));
  foreach ($facets as $facet => $value) {
    if($facet == 'Source')
      continue;
    $facet = str_replace('_', '.', $facet);
    $params[] = 'facet_' . $facet . '=' . urlencode($value);
  }
  $search_url = $intermine_base_url . '/service/search?' . implode('&', $params);
  return $search_url;
}

function _intermine_search_filter_available_mines($intermines = array(), $facets = array()) {
  if(array_key_exists('Source', $facets)) {
    $_intermine_name = $facets['Source'];
    $intermines = array_filter($intermines, function ($var) use ($_intermine_name) {
      return ($var['intermine_name'] == $_intermine_name);
    });
  }
  return $intermines;
}

function intermine_search_search_execute($keys = NULL, $conditions = NULL) {
  $facets = _intermine_search_extract_facets();

  // get configured variables
  $_intermine_name = variable_get('intermine_name');
  $_intermine_base_url = variable_get('intermine_base_url');

  // check if intermine_base_url is a json_encoded string containing
  // references to multiple intermine instances
  $intermines = array();
  $intermines = json_decode($_intermine_base_url, true);
  if ($intermines === null) {
    $intermines[] = array('intermine_base_url' => "$_intermine_base_url", 'intermine_name' => "$_intermine_name");
  } else {
    $intermines = objectToArray($intermines);
  }
  // if the 'Source' facet is set, filter the list of available mines
  // down to the the chosen instance
  $intermines = _intermine_search_filter_available_mines($intermines, $facets);

  // iterate through all intermines and initialize curl_multi() handles
  $icurlHandles = array();
  $mh = curl_multi_init();
  foreach ($intermines as $intermine) {
    $intermine_base_url = $intermine["intermine_base_url"];

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_TIMEOUT, 60);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_URL, _intermine_search_service_url($intermine_base_url, $keys, $conditions, $facets));

    $icurlHandles[$intermine_base_url] = $ch;
    curl_multi_add_handle($mh, $ch);
  }

  // execute parallel curl requests to all remote mines
  $active = null;
  do {
    $mrc = curl_multi_exec($mh, $active);
  } while ($mrc == CURLM_CALL_MULTI_PERFORM);

  while ($active && $mrc == CURLM_OK) {
    while (curl_multi_exec($mh, $active) === CURLM_CALL_MULTI_PERFORM);

    if (curl_multi_select($mh) != -1) {
      do {
        $mrc = curl_multi_exec($mh, $active);
      } while ($mrc == CURLM_CALL_MULTI_PERFORM);
    }
  }

  // sequentially process json responses from each remote mines
  // and store results in array()
  $results = array();
  $extra = array();
  foreach ($intermines as $intermine) {
    $intermine_base_url = $intermine["intermine_base_url"];
    $intermine_name = $intermine['intermine_name'];

    $ch = $icurlHandles[$intermine_base_url];
    $response_json = curl_multi_getcontent($ch);

    $_results = array();
    $_extra = array();

    $_rel_tracker = array();
    $_rel_counter = 0;
    $response = json_decode($response_json);
    if (! ($response_json == NULL) ) {
      if (count($response->results) > 0) {
        foreach($response->results as $result) {
          $abs_relevance = strval($result->relevance);
          // calculate a relative relevance value
          // to be used to aggregate then sort results across multiple mines
          if (!array_key_exists($abs_relevance, $_rel_tracker)) {
            $_rel_counter++;
            $_rel_tracker[$abs_relevance] = $_rel_counter;
          }

          // build results array element containing both absolute and relative relevance values
          $_results[] = array(
            'link' => $intermine['intermine_base_url'] . '/report.do?id=' . $result->id,
            'type' => $result->type,
            'title' => _intermine_search_result_title($result),
            'absRelevance' => floatval($abs_relevance),
            'relRelevance' => $_rel_tracker[$abs_relevance],
            'snippet' => theme('intermine_search_result__'.strtolower($result->type), array('source' => $intermine_name, 'result' => $result))
          );
        }

        // store extra info (about facets) in a separate object
        // to be appended to the end of the $results object
        $_extra = objectToArray($response->facets);

        // store source intermine name in facets
        $catsum = 0;
        foreach($_extra['Category'] as $cat => $elem) {
          $catsum += $elem;
        }
        $_extra['Source'] = array($intermine_name => $catsum);
      }
    }
    // recursively merge the above $_results object with the master $results object
    $results = array_merge_recursive($results, objectToArray($_results));

    // similarly merge the $_extra object with the master $extra object
    $extra = array_merge_recursive($extra, $_extra);

    curl_multi_remove_handle($mh, $ch);
  }

  curl_multi_close($mh);

  // sort results by relative relevance
  usort($results, function($a, $b) {
    return $a['relRelevance'] - $b['relRelevance'];
  });

  // iterate through facets array and calculate sum(counts) for each category/facet
  foreach($extra as $facet => $elems) {
    foreach($elems as $cat => $elem) {
      if(is_array($elem)) {
        $extra[$facet][$cat] = array_sum($elem);
      }
    }
  }

  // store facets as last elem of results array()
  if (count($results) != 0) {
    $results[] = array(
      'link' => '',
      'type' => 'facets',
      'relRelevance' => 999999,
      'extra' => $extra
    );
  }

  return $results;
}

function _intermine_search_extract_facets() {
  $facets = array();
  foreach ($_REQUEST as $key => $value) {
    if ($key != 'q') {
      $facets[$key] = $value;
    }
  }
  return $facets;
}

function intermine_search_search_page($results) {
  $output = array();
  if (count($results) == 0) {
    $contentSearch = 'search/node/' . arg(2);
    $output['noresults'] = array(
      '#markup' => '<h2>No results</h2><p>There were no results in ' . variable_get('intermine_name')
      . ' for your search term(s). Try searching '.l('Site Content', $contentSearch).' instead.</p>'
    );
  } else {
    $pageUrl = request_path();
    $search_facets = _intermine_search_extract_facets();
    if (count($search_facets) > 0) {
      $output['facets'] = array(
        '#prefix' => '<div class="well well-sm">',
        '#suffix' => '</div>',
        'info' => array(
          '#markup' => '<p>Results filtered by:</p>'
        ),
        'list' => array(
          '#theme' => 'item_list',
          '#items' => array(),
          '#title' => null
        )
      );
      foreach($search_facets as $f => $v) {
        $unrefine = $search_facets;
        unset($unrefine[$f]);
        $output['facets']['list']['#items'][] = l('<i class="fa fa-minus-circle"></i> '.$f.': '.$v, $pageUrl, array('query' => $unrefine, 'html' => true, 'attributes'=> array('class'=> array('text-danger'))));
      }
    }

    $summary['prefix']['#markup'] = '<div class="sidebar block results-column-fluid"><h2 class="title">Refine results by:</h2>';
    $content['prefix']['#markup'] = '<div class="results-column-fluid"><ol class="search-results">';

    foreach ($results as $entry) {
      if ($entry['type'] == 'facets') {
        $facets = $entry['extra'];
        foreach($facets as $type => $info) {
          $items = array();
          foreach ($info as $detail => $count) {
            $refine = $search_facets;
            $refine[$type] = $detail;
            $items[] = l($detail. ': <span class="badge">'.$count.'</span>', $pageUrl, array('html' => true, 'query' => $refine));
          }
          $summary['facets'][] = array(
            '#theme' => 'item_list',
            '#items' => $items,
            '#title' => $type
          );
        }
      } else {
        $content[] = array(
          '#theme' => 'search_result',
          '#result' => $entry,
          '#module' => 'intermine_search',
        );
      }
    }
    $content['suffix']['#markup'] = '</ol>' . theme('pager') . '</div>';
    $summary['suffix']['#markup'] = '</div>';

    $output['results'] = array(
      'prefix' => array('#markup' => '<div class="sidebar results-container">'),
      'summary' => $summary,
      'output' => $content,
      'suffix' => array('#markup' => '</div>'),
    );
  }


  return $output;
}

function intermine_search_theme() {
  return array(
    'intermine_search_result' => array(
      'pattern' => 'intermine_search_result__',
      'variables' => array(
        'result' => NULL
      )
    )
  );
}

function _intermine_search_result_title($result) {
  switch($result->type) {
  case 'Gene':
  case 'MRNA':
  case 'Protein':
    return $result->fields->primaryIdentifier;
  case 'Publication':
    return $result->fields->title;
  case 'Author':
  case 'Lab':
  case 'InteractionTerm':
  case 'GOTerm':
  case 'SOTerm':
  case 'Sample':
  case 'OntologyTerm':
    return $result->fields->name;
  case 'Synonym':
    return $result->fields->value;
  default:
    // just return first object key
    $fields = (Array)$result->fields;
    $title = array_shift($fields);
    return $title;
  }
}

function _intermine_search_nice_field_name($field_name) {
  return ucfirst(preg_replace('/[.]/', ' ', preg_replace_callback('/([A-Z])/', function($matches) {
    return ' '.strtolower($matches[0]);
  }, $field_name)));
}

function theme_intermine_search_result($variables) {
  $result = $variables['result'];
  $intermine_name = $variables['source'];

  $snippet = '<dl class="dl-horizontal">';
  $snippet .= '<dt><strong>Result type</strong></dt><dd><i class="fa fa-tag"></i> ' . $result->type . '</dd>';
  foreach ($result->fields as $name => $value) {
    $nice_name = _intermine_search_nice_field_name($name);
    $snippet .= '<dt>'.$nice_name.'</dt>';
    $snippet .= '<dd>'.$value.'</dd>';
  }
  $snippet .= '<dt><strong>Source</strong></dt><dd>' . $intermine_name . '</dd>';
  $snippet .= '</dl>';

  return $snippet;
}

/*
  Helper function to convert stdClass objects to multi-dim array()
  Code borrowed from http://j.mp/2AFqwFc
 */
function objectToArray($d) {
  if (is_object($d)) {
    $d = get_object_vars($d);
  }

  if (is_array($d)) {
    return array_map(__FUNCTION__, $d);
  }
  else {
    return $d;
  }
}
